<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2024/10/06/test/"/>
    <url>/2024/10/06/test/</url>
    
    <content type="html"><![CDATA[<p>测试图片</p><img src="/2024/10/06/test/1.jpg" class="" title="图片">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>torch 中的 stft、torchaudio 中的 Spectrogram、Melscale、MelSpectrogram 的使用</title>
    <link href="/2024/10/06/stft-melscale/"/>
    <url>/2024/10/06/stft-melscale/</url>
    
    <content type="html"><![CDATA[<h3 id="torch-stft">torch.stft()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">output = torch.stft(<span class="hljs-built_in">input</span>, n_fft, hop_length=<span class="hljs-literal">None</span>, win_length=<span class="hljs-literal">None</span>, window=<span class="hljs-literal">None</span>, center=<span class="hljs-literal">True</span>, pad_mode=<span class="hljs-string">&#x27;reflect&#x27;</span>, normalized=<span class="hljs-literal">False</span>, onesided=<span class="hljs-literal">None</span>, return_complex=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><em>简介：短时傅里叶变换</em></p><p>其中：</p><ul><li>input(Tensor) 代表输入信号</li><li>n_fft(int) 代表快速傅里叶变换的序列长度</li><li>hop_length(int) 代表相邻两个滑动窗口帧之间的距离，也即是帧移</li><li>win_length(int) 代表窗口大小，默认等于 n_fft</li><li>window(Tensor) 代表窗口函数，默认是矩形窗口（全1）</li><li>center(bool) 代表是否对输入tensor在两端进行padding，使得第 $t$ 帧是以 $t \times hop_length$ 为中心的，默认为 True，如果为 False，则第 $t$ 帧以 $t \times hop_length$ 开始。</li><li>pad_mode(str) 代表padding的模式（当center为True才有效），默认为 reflect，即对边界的值进行reflect padding</li><li>normalized(bool) 代表是否对返回的STFT结果进行归一化，默认为 False</li><li>onesided(bool) 代表是否只返回一侧的STFT结果（当输入Tensor为实数时，输出为对称的），当输入Tensor和window都为实数时默认为 True，反之为 False</li><li>return_complex(bool) 代表返回实部和虚部的STFT结果还是返回复数</li></ul><p>输出：</p><ul><li>output(Tensor) 代表输出的STFT结果，维度为 $\star \times N \times T$，$\star$ 代表 batch size，$N$ 代表频率域的维度，$T$ 代表时间域的维度。</li></ul><p>计算表达式为：</p><p>$$<br>X[\omega, m] = \sum_{k=0}^{\text {win_length-1 }} \text { window }[k] \text { input }[m \times \text { hop_length }+k] \exp \left(-j \frac{2 \pi \cdot \omega k}{\text { win_length }}\right)<br>$$</p><p>其中，$m$ 为滑动窗口的索引，$\omega$ 代表频率，当 <code>onesided=False</code> 时，$\omega$ 的取值范围为：$[0, \text { n_fft }]$，当 <code>onesided=True</code> 时，$\omega$ 的取值范围为：$[0, \lfloor \frac{\text { n_fft} }2 \rfloor ]$</p><blockquote><p>注意：上面的表达式是加窗的短时傅里叶变换，但是在计算过程中，往往采用快速傅里叶变换来计算每个 $m$ 对应的帧，因此 n_fft 和 win_length <strong>可以不相等</strong>，计算时对加窗后的信号进行补零到 n_fft 的长度，所以需要满足： 0 &lt; win_length &lt;= n_fft</p></blockquote><blockquote><p>当参数center默认为True时，此时会对信号进行padding，第 $0$ 帧以 $x[0]$ 居中，且左右两边 padding 的长度为 $\lfloor \frac{\text { n_fft} }2 \rfloor$，输出的帧数为 $T = \lfloor \frac{\text{seq_len}}{\text{hop_length}}\rfloor + 1$ 其中，seq_len 代表输入tensor的序列长度。</p></blockquote><blockquote><p>而当设置center参数为False时，第 $0$ 帧以 $x[0]$ 为开头，输出维度很奇怪？？</p></blockquote><blockquote><p>在频域维度，当 <code>oneside=True</code> 输出的 $N = \frac{\text { n_fft} }2 + 1 $ ，当 <code>oneside=False</code> 输出的 $N = \text { n_fft}$</p></blockquote><blockquote><p>最后，由于此时并不知道输入信号的采样频率， 所以输出的频率没有具体值。或者说，输出矩阵在频率轴的值对应的频率为 $\omega = \frac{2\pi}{N}k$，其中，$k$ 为频率轴的索引，且这里的 $\omega$ 为DSP中常说的数字角频率，他和模拟频率 $f$ 的关系为：$\omega = \frac{2\pi f}{f_s}$，其中 $f_s$ 为输入信号的采样频率，那么 $k=\frac{\text{n_fft}}{2}$ 为频率轴信号的最高频率（假定 <code>oneside=True</code> ），对应的具体值为采样率的 $1/2$，而这也符合奈奎斯特采样定理：</p><blockquote><p>为了不失真地恢复原始信号，采样率必须大于测量信号最大频率的两倍 $f_s &gt; 2 \times f_N$</p></blockquote></blockquote><h3 id="torchaudio-transforms-Spectrogram">torchaudio.transforms.Spectrogram</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">output = torchaudio.transforms.Spectrogram(n_fft: <span class="hljs-built_in">int</span> = <span class="hljs-number">400</span>, win_length: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span>, hop_length: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span>, pad: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>, window_fn: <span class="hljs-type">Callable</span>[[...], torch.Tensor] = &lt;built-<span class="hljs-keyword">in</span> method hann_window of <span class="hljs-built_in">type</span> <span class="hljs-built_in">object</span>&gt;, power: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-number">2.0</span>, normalized: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>, wkwargs: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">dict</span>] = <span class="hljs-literal">None</span>, center: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>, pad_mode: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reflect&#x27;</span>, onesided: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>, return_complex: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>] = <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><em>简介：求输入信号的语谱图</em></p><p>其中：</p><ul><li>n_fft 为FFT的长度，默认为400，会生成 n_fft // 2 + 1 个 bins</li><li>win_length 为窗口的长度，默认为 n_fft</li><li>hop_length 为相邻两个滑动窗口帧之间的距离，即帧移，默认为 win_length // 2</li><li>pad 为对输入信号两边的补零长度，默认为 0</li><li>window_fn 为窗函数，默认为 torch.hann_window</li><li>power 为语谱图的幂指数，默认为 2.0，值必须大于 0，取 1 代表能量，取 2 代表功率。</li><li>normalized 为是否对语谱图进行归一化，默认为 False</li><li>wkwargs 为窗函数的参数，默认为 None</li><li>center 为是否对输入tensor在两端进行padding，使得第 $t$ 帧是以 $t \times hop_length$ 为中心的，默认为 True，如果为 False，则第 $t$ 帧以 $t \times hop_length$ 开始。</li><li>pad_mode 为补零方式，默认为 reflect</li><li>onesided 为是否只计算一侧的语谱图，默认为 True，即返回单侧的语谱图，如果为 False，则返回全部的语谱图。</li><li>return_complex 不再使用了</li></ul><blockquote><p>求解Spectrogram的本质其实还是stft，因此当 <code>power=1</code>时，输出的就是stft的能量谱。当 <code>power=None</code>时，就是直接输出了stft的结果，当<code>power=2</code>时，输出就是<code>power=1</code>的值的平方。</p></blockquote><h3 id="torchaudio-transforms-MelScale">torchaudio.transforms.MelScale</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torchaudio.transforms.MelScale(n_mels: <span class="hljs-built_in">int</span> = <span class="hljs-number">128</span>, sample_rate: <span class="hljs-built_in">int</span> = <span class="hljs-number">16000</span>, f_min: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.0</span>, f_max: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-literal">None</span>, n_stft: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span>, norm: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>, mel_scale: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;htk&#x27;</span>)<br></code></pre></td></tr></table></figure><p><em>简介：用来将stft的结果转换为mel域中的stft的结果。</em></p><p>其中：</p><ul><li>n_mels(int) 为mel滤波器的个数，默认为128</li><li>sample_rate(int) 为音频采样率，默认为16000</li><li>f_min(float) 为音频的最小频率，默认为0.0</li><li>f_max(float) 为音频的最大频率，默认为采样率二分之一： sample_rate // 2</li><li>n_stft(int) 为stft的bin的个数，不给的话默认为None，从第一个输入计算得到。</li><li>norm(str) 如果为“slaney”，则将三角形mel权重除以mel bin的宽度（即进行面积归一化），默认为None</li><li>mel_scale(str) 采用的mel尺度: htk 或者 slaney，默认 htk</li></ul><p>输入：</p><ul><li>input(Tensor) Spectrogram 的输出，其维度为 $\star \times n_stft \times T$<br>输出：</li><li>output(Tensor) 返回大小为 $\star \times n_mels \times T$ 的Tensor</li></ul><blockquote><p>这一过程其实就是首先计算一个 $\star \times n_stft \times n_mels$ 的滤波器组矩阵，这个矩阵体现了信号频率 和 mel 域频率之间的转换关系，然后和输入的 Spectrogram 做矩阵乘法：<img src="/_posts/stft-melscale/1658904252722.png" alt="1658904252722"><br>最后求得mel域的Spectrogram，即Mel谱。</p></blockquote><blockquote><p>注意：计算Spectrogram的时候不需要采样率，这是因为输出的频率是数字域角频率，而在计算MelScale的时候，需要具体的模拟频率和Mel域频率之间的转换关系，因此需要采样率来求出模拟频率的具体值，最后再转换到Mel域频率。</p></blockquote><h3 id="torchaudio-transforms-MelSpectrogram">torchaudio.transforms.MelSpectrogram</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torchaudio.transforms.MelSpectrogram(sample_rate: <span class="hljs-built_in">int</span> = <span class="hljs-number">16000</span>, n_fft: <span class="hljs-built_in">int</span> = <span class="hljs-number">400</span>, win_length: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span>, hop_length: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span>, f_min: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.0</span>, f_max: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">float</span>] = <span class="hljs-literal">None</span>, pad: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>, n_mels: <span class="hljs-built_in">int</span> = <span class="hljs-number">128</span>, window_fn: <span class="hljs-type">Callable</span>[[...], torch.Tensor] = &lt;built-<span class="hljs-keyword">in</span> method hann_window of <span class="hljs-built_in">type</span> <span class="hljs-built_in">object</span>&gt;, power: <span class="hljs-built_in">float</span> = <span class="hljs-number">2.0</span>, normalized: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>, wkwargs: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">dict</span>] = <span class="hljs-literal">None</span>, center: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>, pad_mode: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;reflect&#x27;</span>, onesided: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>, norm: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>, mel_scale: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;htk&#x27;</span>)<br></code></pre></td></tr></table></figure><p><em>简介：求输入信号的Mel谱</em></p><p>其中：</p><ul><li>sample_rate(int) 为输入波形的采样率</li><li>n_fft(int) 为FFT的长度，默认为400，会生成 n_fft // 2 + 1 个 bins</li><li>win_length 为窗口的长度，默认为 n_fft</li><li>hop_length 为相邻两个滑动窗口帧之间的距离，即帧移，默认为 win_length // 2</li><li>f_min(float) 为音频的最小频率，默认为0.0</li><li>f_max(float) 为音频的最大频率，默认为None</li><li>pad 为对输入信号两边的补零长度，默认为 0</li><li>n_mels(int) 为mel滤波器的个数，默认为128</li><li>window_fn 为窗函数，默认为 torch.hann_window</li><li>power(float) 为语谱图的幂指数，默认为 2.0，值必须大于 0，取 1 代表能量，取 2 代表功率。</li><li>normalized(bool) 为是否对stft的输出进行归一化，默认为 False</li><li>wkwargs 为窗函数的参数，默认为 None</li><li>center(bool) 为是否对输入tensor在两端进行padding，使得第 $t$ 帧是以 $t \times hop_length$ 为中心的，默认为 True，如果为 False，则第 $t$ 帧以 $t \times hop_length$ 开始。</li><li>pad_mode(str) 为补零方式，默认为 reflect</li><li>onesided(bool) 为是否只计算一侧的谱图，默认为 True，即返回单侧的语谱图，如果为 False，则返回全部的谱图。</li><li>norm(str) 如果为“slaney”，则将三角形mel权重除以mel bin的宽度（即进行面积归一化），默认为None</li><li>mel_scale(str) 采用的mel尺度: htk 或者 slaney，默认 htk</li></ul><p>输入：</p><ul><li>input(Tensor) 输入波形信号</li></ul><p>输出：</p><ul><li>output(Tensor) 输出Mel谱</li></ul><blockquote><p>可以看出，MelSpectrogram的参数完全就是Spectrogram的参数+MelScale的参数。实际上，这个函数的计算过程就是在里面先计算spectrogram再计算mel_scale：<img src="/_posts/stft-melscale/1658906639628.png" alt="1658906639628"><br>测试结果也验证了这一点：<img src="/_posts/stft-melscale/1658906997678.png" alt="1658906997678"><br>用两种方法计算的mel谱结果完全一样。</p></blockquote><h3 id="其他">其他</h3><ol><li>关于信号的能量谱和功率谱（<a href="https://www.cnblogs.com/sccdlyc/archive/2012/08/13/2637121.html">参考</a>）：</li></ol><ul><li>能量谱：通常用来描述能量信号（能量有限的信号称为能量信号），表示的是信号在各个频点中的能量分布情况，如果对能量谱在频域进行积分，则可以求出信号的总能量。</li><li>功率谱：通常用来描述功率信号（功率有限的信号称为功率信号），是指用密度的概念表示信号功率在各频率点的分布情况，对功率谱在频域上积分就可以得到信号的功率。</li><li>维纳-辛钦定理：信号的功率谱和其自相关函数是一对傅里叶变换。在工程实际中，即便是功率信号，由于持续的时间有限，可以直接对信号进行傅里叶变换，然后对得到的幅度谱的模求平方，再除以持续时间来估计信号的功率谱。</li><li>根据上面的解释，<code>torchaudio.transforms.Spectrogram</code> 求功率谱时并没有除以持续时间，而是直接输出了平方值。</li></ul><ol start="2"><li>关于Spectrogram和stft：</li></ol><ul><li>当 <code>torchaudio.transforms.Spectrogram</code> 网络中的 <code>power=1</code> 时，输出的Spectrogram是能量图，在其他参数完全相同的情况下，其输出结果和 <code>torch.stft</code> 函数中 <code>return_complex=True</code> 的输出再求复数的模值之后的结果相同：<img src="/_posts/stft-melscale/1658888255212.png" alt="1658888255212"><br>图中，$x_1$ 是stft函数求模之后的结果，$x_2$ 是直接求Spectrogram得到的结果。</li><li>当 <code>torchaudio.transforms.Spectrogram</code> 网络中的 <code>power=None</code> 时，输出的Spectrogram是sftf的直接结果，在其他参数完全相同的情况下，其输出结果和 <code>torch.stft</code> 函数中 <code>return_complex=True</code>  完全相同：<img src="/2024/10/06/stft-melscale/1658890413165.png" class="" width="1658890413165"><br>图中，$x_1$ 是stft函数之后的结果，$x_2$ 是直接求Spectrogram得到的结果。</li><li>事实上，Spectrogram内部就是调用了stft的计算：<img src="./stft-melscale/1658890572376.png" alt="1658890572376"><br>然后根据 <code>power</code> 取值计算最终的输出。</li></ul><ol start="3"><li>reflect padding : 以矩阵的边界为对称轴，将内部的数据复制到外部：<img src="1658822672171.png" alt="1658822672171"></li></ol>]]></content>
    
    
    <categories>
      
      <category>科研学术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>配置文件修改记录</title>
    <link href="/2024/10/06/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%88%91%E4%BF%AE%E6%94%B9%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/10/06/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%88%91%E4%BF%AE%E6%94%B9%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="config-yml-配置"><code>_config.yml</code> 配置</h2><p><code>post_asset_folder</code>：原始默认为 <code>false</code>，修改为 <code>true</code>，这样在每次新建 post 的时候，会自动在 post 文件夹下创建一个同名文件夹，用于存放 post 的专属资源文件。</p><h2 id="config-fluid-yml-主题配置"><code>_config.fluid.yml</code> 主题配置</h2>]]></content>
    
    
    <categories>
      
      <category>个人网站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>其他</title>
    <link href="/2024/10/06/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/"/>
    <url>/2024/10/06/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/</url>
    
    <content type="html"><![CDATA[<h2 id="其他细节">其他细节</h2><ol><li>对于一些全局资源文件，如图片，可以将其存在 source 文件夹下，且引用的时候用 <code>/</code> 开头，如对于存放在 source 文件夹下的图片 <code>source/imgs/1.jpg</code>，在 markdown 文件中引用为 <code>![图片标题](/imgs/1.jpg)</code>。</li><li>对于一篇 post 的专属资源文件，如图片，可以打开 <code>_config.yml</code> 文件，找到 <code>post_asset_folder</code>，将其设置为 <code>true</code>，这样在每次新建 post 的时候，会自动在 post 文件夹下创建一个同名文件夹，用于存放 post 的专属资源文件，引用时，可以直接使用 <code>![图片标题](1.jpg)</code>。</li><li>如何</li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>todo</title>
    <link href="/2024/10/05/%E5%85%B6%E4%BB%96/todo/"/>
    <url>/2024/10/05/%E5%85%B6%E4%BB%96/todo/</url>
    
    <content type="html"><![CDATA[<p>本博客的一些 todo list：<br>[ ] 教程：使用 AI 工具生成网站首页图、封面、logo 等<br>[ ] 分享一些工具<br>[ ] 优化 tags 和 categories<br>[ ] 如何添加图片、如何对文件夹进行分类</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站 - 如何从零开始基于 hexo + github pages 搭建个人网站</title>
    <link href="/2024/10/05/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%991/"/>
    <url>/2024/10/05/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%991/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言">1. 前言</h2><p>本文提供了从零开始，基于 hexo 和 github pages 搭建个人静态网站的步骤。</p><blockquote><p>由于网上已经有很多资源了，所以对于一些基础的准备工作下面直接用链接替代。同时下面的操作假设用户已经熟悉 git 并且已经有 github 账号。</p></blockquote><h2 id="2-准备工作">2. 准备工作</h2><blockquote><p>下面操作仅针对 Mac 测试。</p></blockquote><ol><li>安装配置 Homebrew，参考：</li></ol><ul><li><a href="https://zhuanlan.zhihu.com/p/372576355">https://zhuanlan.zhihu.com/p/372576355</a></li><li><a href="https://blog.csdn.net/weixin_41317840/article/details/128751211">https://blog.csdn.net/weixin_41317840/article/details/128751211</a></li></ul><ol start="2"><li>安装配置 Node.js 和 npm，参考：</li></ol><ul><li><a href="https://blog.csdn.net/weixin_41317840/article/details/128756634">https://blog.csdn.net/weixin_41317840/article/details/128756634</a></li></ul><blockquote><p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功。</p></blockquote><h2 id="3-安装并创建-hexo-项目">3. 安装并创建 hexo 项目</h2><blockquote><p>安装教程参考 <a href="https://hexo.io/zh-cn/docs/">hexo 官网</a>。</p></blockquote><p>采用 npm 安装 hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><blockquote><p>如果遇到 npm 安装慢的问题，可以修改 npm 的源，参考 <a href="https://blog.csdn.net/qq_43940789/article/details/131449710">国内npm源镜像</a>。</p></blockquote><blockquote><p>安装完成后，输入 <code>hexo -v</code> 查看是否安装成功。</p></blockquote><p>成功安装 hexo 后，即可创建 hexo 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;blog_name&gt;<br><span class="hljs-built_in">cd</span> &lt;blog_name&gt;<br>npm install<br></code></pre></td></tr></table></figure><blockquote><p>上面的 <code>&lt;blog_name&gt;</code> 为博客所在的文件夹名。</p></blockquote><p>上面完成配置后，可以通过，即可在本地查看静态网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成静态文件</span><br>hexo generate<br><span class="hljs-comment"># 或者简写为 hexo g</span><br><br><span class="hljs-comment"># 启动本地服务</span><br>hexo server<br><span class="hljs-comment"># 或者简写为 hexo s</span><br></code></pre></td></tr></table></figure><h2 id="4-github-pages-配置">4. github pages 配置</h2><p>完成上述配置只是可以在本地查看静态网站，接下来需要将静态网站部署到 github pages 上，从而可以通过域名访问。</p><p>假设已经有了 github 账号，接下来创建一个新的 repository，名字为 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 为 github 用户名。</p><p>下面开始配置 hexo 项目，这里采用最简单的 <a href="https://hexo.io/zh-cn/docs/one-command-deployment">一键部署</a>：</p><blockquote><p>一键部署不会将源文件上传到 github，只会将生成的静态页面文件上传到 github。</p></blockquote><p>首先安装 hexo-deployer-git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后在路径下的 <code>_config.yml</code> 文件中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span> <span class="hljs-comment"># 仓库地址</span><br>    <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br>    <span class="hljs-attr">message:</span> [<span class="hljs-string">message</span>]<br></code></pre></td></tr></table></figure><blockquote><p>其中 <code>&lt;repository url&gt;</code> 为 <code>&lt;username&gt;.github.io</code> 的仓库地址。这里的地址可以是 <code>http url</code> 或者 <code>ssh url</code>：</p><ul><li>如果是 <code>http url</code>：deploy 时会要求输入 github 用户名和密码。</li><li>如果是 <code>ssh url</code>：可以先在 github 中添加本机的 ssh key，实现免密 deploy。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>个人网站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站 - Fluid 主题配置修改</title>
    <link href="/2024/10/05/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%992/"/>
    <url>/2024/10/05/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%992/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言">1. 前言</h2><p>本文提供了如何修改 hexo 主题 Fluid 的配置。</p>]]></content>
    
    
    <categories>
      
      <category>个人网站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人网站 - cloudflare 加速 github 访问</title>
    <link href="/2024/10/05/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%993/"/>
    <url>/2024/10/05/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%993/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言">1. 前言</h2><p>对于大陆用户，当访问 github 时，经常会遇到访问速度慢的问题。本文提供采用 cloudflare 加速 github page 访问的方法。</p>]]></content>
    
    
    <categories>
      
      <category>个人网站</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/03/%E5%85%B6%E4%BB%96/hello-world/"/>
    <url>/2024/10/03/%E5%85%B6%E4%BB%96/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
